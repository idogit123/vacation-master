"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeSeriesStatisticsOperation = void 0;
const RavenCommand_1 = require("../../../Http/RavenCommand");
class GetTimeSeriesStatisticsOperation {
    constructor(documentId) {
        this._documentId = documentId;
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(store, conventions, httpCache) {
        return new GetTimeSeriesStatisticsCommand(conventions, this._documentId);
    }
}
exports.GetTimeSeriesStatisticsOperation = GetTimeSeriesStatisticsOperation;
class GetTimeSeriesStatisticsCommand extends RavenCommand_1.RavenCommand {
    constructor(conventions, documentId) {
        super();
        this._conventions = conventions;
        this._documentId = documentId;
    }
    get isReadRequest() {
        return true;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/timeseries/stats?docId=" + this._urlEncode(this._documentId);
        return {
            method: "GET",
            uri
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        let body = null;
        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);
        const { timeSeries, ...restProps } = results;
        const dateUtil = this._conventions.dateUtil;
        this.result = {
            ...restProps,
            timeSeries: timeSeries.map(t => {
                const { startDate, endDate } = t;
                return {
                    ...t,
                    startDate: dateUtil.parse(startDate),
                    endDate: dateUtil.parse(endDate)
                };
            })
        };
        return body;
    }
}
//# sourceMappingURL=GetTimeSeriesStatisticsOperation.js.map