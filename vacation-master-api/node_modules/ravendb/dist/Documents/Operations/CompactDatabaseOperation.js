"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompactDatabaseCommand = exports.CompactDatabaseOperation = void 0;
const Exceptions_1 = require("../../Exceptions");
const RavenCommand_1 = require("../../Http/RavenCommand");
class CompactDatabaseOperation {
    constructor(compactSettings) {
        if (!compactSettings) {
            (0, Exceptions_1.throwError)("InvalidArgumentException", "CompactSettings cannot be null");
        }
        this._compactSettings = compactSettings;
    }
    getCommand(conventions) {
        return new CompactDatabaseCommand(conventions, this._compactSettings);
    }
    get resultType() {
        return "OperationId";
    }
}
exports.CompactDatabaseOperation = CompactDatabaseOperation;
class CompactDatabaseCommand extends RavenCommand_1.RavenCommand {
    constructor(conventions, compactSettings) {
        super();
        if (!conventions) {
            (0, Exceptions_1.throwError)("InvalidArgumentException", "Conventions cannot be null");
        }
        if (!compactSettings) {
            (0, Exceptions_1.throwError)("InvalidArgumentException", "CompactSettings cannot be null");
        }
        this._compactSettings = compactSettings;
    }
    createRequest(node) {
        const uri = node.url + "/admin/compact";
        const body = this._serializer.serialize(this._compactSettings);
        return {
            method: "POST",
            body,
            uri,
            headers: this._headers().typeAppJson().build()
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    get isReadRequest() {
        return false;
    }
}
exports.CompactDatabaseCommand = CompactDatabaseCommand;
//# sourceMappingURL=CompactDatabaseOperation.js.map