"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RavenCommand = void 0;
const StatusCode_1 = require("./StatusCode");
const stream = require("readable-stream");
const node_fetch_1 = require("node-fetch");
const LogUtil_1 = require("../Utility/LogUtil");
const Exceptions_1 = require("../Exceptions");
const HttpUtil_1 = require("../Utility/HttpUtil");
const Serializer_1 = require("../Mapping/Json/Serializer");
const RavenCommandResponsePipeline_1 = require("./RavenCommandResponsePipeline");
const ReadableWebToNodeStream_1 = require("../Utility/ReadableWebToNodeStream");
const LengthUnawareFormData_1 = require("../Utility/LengthUnawareFormData");
const readable_stream_1 = require("readable-stream");
const log = (0, LogUtil_1.getLogger)({ module: "RavenCommand" });
class RavenCommand {
    get responseType() {
        return this._responseType;
    }
    get canCache() {
        return this._canCache;
    }
    get canCacheAggressively() {
        return this._canCacheAggressively;
    }
    get selectedNodeTag() {
        return this._selectedNodeTag;
    }
    get numberOfAttempts() {
        return this._numberOfAttempts;
    }
    set numberOfAttempts(value) {
        this._numberOfAttempts = value;
    }
    constructor(copy) {
        this.failoverTopologyEtag = -2;
        if (copy instanceof RavenCommand) {
            this._canCache = copy._canCache;
            this._canCacheAggressively = copy._canCacheAggressively;
            this._selectedNodeTag = copy._selectedNodeTag;
            this._responseType = copy._responseType;
        }
        else {
            this._responseType = "Object";
            this._canCache = true;
            this._canCacheAggressively = true;
        }
    }
    get _serializer() {
        return Serializer_1.JsonSerializer.getDefaultForCommandPayload();
    }
    async setResponseFromCache(cachedValue) {
        if (!cachedValue) {
            this.result = null;
            return;
        }
        const readable = new stream.Readable();
        readable.push(cachedValue);
        readable.push(null);
        await this.setResponseAsync(readable, true);
    }
    _defaultPipeline(bodyCallback) {
        return this._pipeline()
            .parseJsonSync()
            .collectBody(bodyCallback)
            .objectKeysTransform("camel");
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (this._responseType === "Empty" || this._responseType === "Raw") {
            this._throwInvalidResponse();
        }
        return (0, Exceptions_1.throwError)("NotSupportedException", this.constructor.name +
            " command must override the setResponseAsync()" +
            " method which expects response with the following type: " +
            this._responseType);
    }
    async send(agent, requestOptions) {
        const { body, uri, fetcher, ...restOptions } = requestOptions;
        log.info(`Send command ${this.constructor.name} to ${uri}${body ? " with body " + body : ""}.`);
        if (requestOptions.agent) {
            agent = requestOptions.agent;
        }
        const bodyToUse = fetcher ? RavenCommand.maybeWrapBody(body) : body;
        const optionsToUse = { body: bodyToUse, ...restOptions, agent };
        const passthrough = new stream.PassThrough();
        passthrough.pause();
        const fetchFn = fetcher ?? node_fetch_1.default;
        const response = await fetchFn(uri, optionsToUse);
        const effectiveStream = fetcher && response.body
            ? new ReadableWebToNodeStream_1.ReadableWebToNodeStream(response.body)
            : (response.body ?? new readable_stream_1.Stream());
        effectiveStream
            .pipe(passthrough);
        return {
            response,
            bodyStream: passthrough
        };
    }
    static maybeWrapBody(body) {
        if (body instanceof LengthUnawareFormData_1.LengthUnawareFormData) {
            throw new Error("Requests using FormData as payload are not yet supported!");
        }
        if (body instanceof stream.Readable) {
            throw new Error("Requests using stream.Readable as payload are not yet supported!");
        }
        return body;
    }
    setResponseRaw(response, body) {
        (0, Exceptions_1.throwError)("NotSupportedException", "When _responseType is set to RAW then please override this method to handle the response.");
    }
    _urlEncode(value) {
        return encodeURIComponent(value);
    }
    static ensureIsNotNullOrEmpty(value, name) {
        if (!value) {
            (0, Exceptions_1.throwError)("InvalidArgumentException", name + " cannot be null or empty");
        }
    }
    isFailedWithNode(node) {
        return this.failedNodes
            && !!this.failedNodes.get(node);
    }
    async processResponse(cache, response, bodyStream, url) {
        if (!response) {
            return "Automatic";
        }
        if (this._responseType === "Empty" ||
            response.status === StatusCode_1.StatusCodes.NoContent) {
            return "Automatic";
        }
        try {
            if (this._responseType === "Object") {
                const contentLength = parseInt(response.headers.get("content-length"), 10);
                if (contentLength === 0) {
                    (0, HttpUtil_1.closeHttpResponse)(response);
                    return "Automatic";
                }
                const bodyPromise = this.setResponseAsync(bodyStream, false);
                bodyStream.resume();
                const body = await bodyPromise;
                if (cache) {
                    this._cacheResponse(cache, url, response, body);
                }
                return "Automatic";
            }
            else {
                const bodyPromise = this.setResponseAsync(bodyStream, false);
                bodyStream.resume();
                await bodyPromise;
            }
            return "Automatic";
        }
        catch (err) {
            log.error(err, `Error processing command ${this.constructor.name} response.`);
            (0, Exceptions_1.throwError)("RavenException", `Error processing command ${this.constructor.name} response: ${err.stack}`, err);
        }
        finally {
            (0, HttpUtil_1.closeHttpResponse)(response);
        }
        return "Automatic";
    }
    _cacheResponse(cache, url, response, responseJson) {
        if (!this.canCache) {
            return;
        }
        const changeVector = (0, HttpUtil_1.getEtagHeader)(response);
        if (!changeVector) {
            return;
        }
        cache.set(url, changeVector, responseJson);
    }
    _addChangeVectorIfNotNull(changeVector, req) {
        if (changeVector) {
            req.headers["If-Match"] = `"${changeVector}"`;
        }
    }
    _reviveResultTypes(raw, conventions, typeInfo, knownTypes) {
        return conventions.objectMapper.fromObjectLiteral(raw, typeInfo, knownTypes);
    }
    async _parseResponseDefaultAsync(bodyStream) {
        let body = null;
        this.result = await this._defaultPipeline(_ => body = _).process(bodyStream);
        return body;
    }
    _headers() {
        return HttpUtil_1.HeadersBuilder.create();
    }
    _throwInvalidResponse() {
        (0, Exceptions_1.throwError)("InvalidOperationException", "Response is invalid");
    }
    static _throwInvalidResponse(cause) {
        (0, Exceptions_1.throwError)("InvalidOperationException", "Response is invalid: " + cause.message, cause);
    }
    onResponseFailure(response) {
    }
    _pipeline() {
        return RavenCommandResponsePipeline_1.RavenCommandResponsePipeline.create();
    }
}
exports.RavenCommand = RavenCommand;
//# sourceMappingURL=RavenCommand.js.map